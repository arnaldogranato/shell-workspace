# - Configs GLOBAL

git config --global user.name nome_usuario
git config --global user.email nome_usuario@gmail.com
# - ESSENCIAL ^^^
git config --global core.editor vim
git config --list                                      # - lista o arquivo de configs
git config --global credential.helper 'cache --timeout=3600' # - Guarda o login e senha/token em memória por 1 hora = 3600min 
git config --global credential.helper store        # - CUIDADO Guarda o login (usr/senha) em um arquivo 

# - Comandos Básicos 

git pull                    # - atualiza o repositório
git pull --no-rebase        # - atualiza e reaplica seus commits locais em cima dos commits remotos mais recentes.
git clone https://githut... # - clona, copia, puxa o repositorio
git init                    # - para iniciar o monitoramento de uma pasta
git status                  # - uso para ver o que tem alterado
git diff                    # - mostra o que foi alterado em meu arquivo
git add nome_arqdir         # - add arquivo
git commit -m "texto"       # - add comentário do que foi modificado
git rebase -i HEAD~3        # - unifica os commits em um só, na tela você escolhe o pick ou se vai descartar ou manter algum
git stash                   # - Salva sem ter que fazer commit, quando tem pouco trabalho feito ainda insignificante
git stash apply             # - Mostra algum aquivo que fivou sem commit na branch para terminarmos nosso trabalho e commitar
git stash list              # - lista os stash feitos com o ID de cada um
git stash apply stash@{2}   # - carrega o arquivo salvo na stash ID = 02
git checkout -- .           # - uso para Voltarcaso caso algum commit errado 
git clean -f -d             # - uso para DELETAR o que nao esta no git
git push                    # - sobe a motificações para o repositório
git push -f                 # - CUIDADO, vai forçar o push
git diff                    # - oque está alterado a diferença
git log                     # - historico de commits
git log --stat              # - historico do projeto
git log --oneline           # - mosta só a rach de cada commit
git log -3                  # - mostra os 3 ultimos commits
git show id_commit          # - mosta o que foi alterado no commit
git checkout -- dir/arq.txt dir/arq.txt # Desfaz as alterações nos arquivos arq.txt.
git clean -df                           # Remove os arquivos de migração não rastreados


# - Trabalhando com Branch

git branch nome_branch                      # - cria uma branch LOCAL
git branch                                  # - lista as branchs locais
git branch -a                               # - lista as branchs do repositório (github)
git checkout nome1_branch                   # - entra na Branch 
git branch -d nome2_branch                  # - deleta local, (D) maiusculo é sem dó, minuscolo é se houver um merge já ok.
git merge nome2_branch                      # - unifica a nome2_branch na local (master)
git rebase nome2_branch                     # - unifica, mas adiciona os commits da branc no historico da master
git remote -v                               # - Lista os repositórios
git cherry-pick cod_rach                    # - puxa o commit dessa rach para sua branch atual
git checkout -b nome_banch cod_rach         # - acessa o backup de uma branch deletada, ai que mora o perigo
git push -u nome_repos_git nome_branch              # - cria uma branch que NÃO EXISTE no repositório
git push -d nome_repos_git nome2_branch             # - deleta a branch do repositório
git push -u nome_repos_git nome_branch              # - add a branch que NÃO EXISTE no repositório
git push --set-upstream nome_repos_git nome_branch  # - add a branch no repositório github 


git rm -f nome_arquivo              # - deleta o arquivo, e deixa de monitorar
git rm --cached nome_arquivo        # - não deleta o arquibo, e deixa de monitorar
git reset --soft HEAD~1             # - volta exatamente um commit, no lugar do HEAD eu posso passar o rach
git reset --hard HEAD~1             # - volta o ultimo commit mas o repositório pode ficar deferente, dai agente passa o push com -f, ma cuidado
git reset HEAD^                     # - volta o ultimo commit
git revert HEAD~2                   # - Volta o arquivo para o penultimo commit, mas manten em segundo o commit que estava
git revert aAa11b7                  # - Volta o arquivo da ranch, mas manten em segundo o commit que estava
git checkout nome_arquivo           # - puxa o arquivo do ultimo commit e descrta sua alterações atuaist

# - Caminho para gerar token: Settings >> Developer settings >> Personal access tokes

Oficial: git-scm.com
Guia Pratico: https://rogerdudler.github.io/git-guide/index.pt_BR.html
Fabio Ruich: https://www.youtube.com/watch?v=i9UqgsXpqT4
Dica: Extensão para o Visual Studio Code legal é o Gitignore Tamplates, pra facilitar o .gitignore
Dica: Eu posso colocar uma exceção no .gitignore com (!) no início da linha, caso eu use um coringa (*) para varios arquivos.

# - PROBLEMAS COM MERGE:
Quando seu repositório local e o repositório remoto (no GitHub) têm histórias diferentes, ou seja, divergiram.

Entendendo os Problemas

    "divergent branches and need to specify how to reconcile them" (git pull):
        Isso significa que o Git não sabe como juntar as alterações do repositório remoto com as suas alterações locais.
        Ele oferece três opções: merge, rebase e fast-forward only.

    "rejected master -> master (non-fast-forward)" (git push):
        Isso significa que você está tentando enviar suas alterações para o repositório remoto, mas o histórico local está "atrasado" em relação ao remoto.
        O Git não permite sobrescrever o histórico remoto sem uma maneira de juntar as alterações.

Passos para Resolver

    Decida como você quer reconciliar as alterações:
        Merge (git config pull.rebase false ou git pull --no-rebase):
            Cria um novo commit que junta as alterações locais e remotas.
            Mantém o histórico de commits mais explícito.
            Pode resultar em um histórico mais "bagunçado" se houver muitos merges.
        Rebase (git config pull.rebase true ou git pull --rebase):
            Reaplica seus commits locais em cima dos commits remotos mais recentes.
            Mantém o histórico de commits mais linear e limpo.
            Pode ser mais complicado se você já compartilhou seus commits locais com outros.
        Fast-forward only (git config pull.ff only):
            Git só fará pull se o repositório remoto estiver a frente do local. Se o local tiver commits que o remoto não tem, o pull falhará.
            Utilizado para garantir que o histórico local, só seja atualizado caso o remoto não tenha commits divergentes.

    Para iniciantes, o merge é geralmente mais simples e seguro.

git pull --no-rebase

    Isso irá baixar as alterações do repositório remoto e criar um commit de merge.
