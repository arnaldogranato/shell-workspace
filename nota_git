#-- Configs

git config --global user.name nome_usuario
git config --global user.email nome_usuario@gmail.com
git config --global core.editor vim
git config --global credential.helper 'cache --timeout=3600' #-- Guarda o login em memória por 1 hora = 3600min 
#-CUIDADO git config --global credential.helper store        #-- Guarda o login (usr/senha) em um arquivo 

#-- Comandos Básicos 

git init                    #-- para iniciar o monitoramento de uma pasta
git status                  #-- uso para ver o que tem alterado
git add nome_arqdir         #-- add arquivo
dit commit -m "texto"       #-- add comentário do que foi modificado
git checkout -- .           #-- uso para Voltarcaso caso algum commit errado 
git clean -f -d             #-- uso para DELETAR o que nao esta no git
git push                    #-- sobe a motificações para o repositório
git push -f                 #-- CUIDADO, vai forçar o push
git diff                    #-- oque está alterado a diferença
git log                     #-- historico de commits
git show id_commit          #-- mosta o que foi alterado no commit


#-- Trabalhando com Branch

git branch                                  #-- lista as branchs locais
git branch -a                               #-- lista as branchs do repositório (github)
git branch nome1_branch                     #-- cria a branch
git checkout nome1_branch                   #-- entra na Branch 
git merge nome2_branch                      #-- unifica a nome2_branch na local
git branch -d nome2_branch                  #-- deleta local, (D) maiusculo é sem dó, minuscolo é se houver um merge já ok.
git push -d origin nome_branch              #-- deleta a branch do repositório
git push --set-upstream origin nome_branch  #-- add a branch no repositório github
 

  
git log --stat                      #-- historico do projeto
git log --oneline                   #-- mosta a rach
git checkout -b nome_banch cod_rach #-- acessa o backup de uma branch deletada, ai que mora o perigo


git rm -f nome_arquivo              #-- deleta o arquivo, e deixa de monitorar
git rm --cached nome_arquivo        #-- não deleta o arquibo, e deixa de monitorar
git reset --soft HEAD~1             #-- volta exatamente um commit, no lugar do HEAD eu posso passar o rach
git reset --hard HEAD~1             #-- volta o ultimo commit mas o repositório pode ficar deferente, dai agente passa o push com -f, ma cuidado
git reset HEAD^                     #-- volta o ultimo commit
git revert HEAD~2                   #-- Volta o arquivo para o penultimo commit, mas manten em segundo o commit que estava
git revert aAa11b7                  #-- Volta o arquivo da ranch, mas manten em segundo o commit que estava
git checkout nome_arquivo           #-- puxa o arquivo do ultimo commit e descrta sua alterações atuaist



Oficial: git-scm.com
Guia Pratico: https://rogerdudler.github.io/git-guide/index.pt_BR.html
Dica: Extensão para o Visual Studio Code legal é o Gitignore Tamplates, pra facilitar o .gitignore
Dica: Eu posso colocar uma exceção no .gitignore com (!) no início da linha, caso eu use um coringa (*) para varios arquivos.
